name: EST protocol tests by using libest
on:
  push:
  pull_request:
    branches: [ devel ]
  schedule:
    # * is a special character in YAML so you have to quote this string
    - cron:  '0 2 * * 6'

jobs:
  est_proto_libest:
    name: "est_proto_libest"
    runs-on: ubuntu-latest
    steps:
    - name: "checkout GIT"
      uses: actions/checkout@v2

    - name: "[ PREPARE ] Build docker-compose"
      working-directory: examples/Docker/
      run: |
        sudo mkdir -p data
        docker network create est
        docker-compose up -d
        docker-compose logs

    - name: "[ PREPARE ] est-proxy config"
      run: |
        sudo cp .github/wf_data/est_proxy_basic.cfg examples/Docker/data/est_proxy.cfg
        sudo cp -R .github/wf_data/certs examples/Docker/data/
        sudo cp -R .github/wf_data/srp examples/Docker/data/
        sudo cp -R .github/wf_data/xca examples/Docker/data/
        sudo chmod 777 examples/Docker/data/est_proxy.cfg
        sudo cat .github/wf_data/est_proxy_clientauth.cfg >> examples/Docker/data/est_proxy.cfg
        sudo cat .github/wf_data/est_proxy_xca.cfg >> examples/Docker/data/est_proxy.cfg
        cd examples/Docker/
        docker-compose restart
        docker-compose logs

    - name: "[ PREPARE ] estclient config"
      run: |
        sudo mkdir /tmp/certs
        sudo cp .github/wf_data/certs/cacerts.pem /tmp/certs
        sudo cp .github/wf_data/certs/est*.pem /tmp/certs

    - name: "[ Test ] fetch Ca certificates using estclient"
      run: |
        docker run -v /tmp/certs:/tmp/certs --env EST_OPENSSL_CACERT=/tmp/certs/cacerts.pem --network est grindsa/estclient estclient.cisco -g -s est-proxy.est -p 17443 -v -o /tmp

    - name: "[ Test ] enroll certificate using estclient"
      run: |
        docker run -v /tmp/certs:/tmp/certs --env EST_OPENSSL_CACERT=/tmp/certs/cacerts.pem --network est grindsa/estclient estclient.cisco -e -s est-proxy.est -p 17443 -k /tmp/certs/estclient.key.pem -c /tmp/certs/estclient.crt.pem --pem-out -o /tmp/certs -v
        sudo openssl x509 -outform der -in /tmp/certs/cert-0-0.pem  -out /tmp/certs/cert-0-0.der
        sudo ls -la /tmp/certs

    - name: "[ Test ] reenroll certificate using estclient"
      run: |
        docker run -v /tmp/certs:/tmp/certs --env EST_OPENSSL_CACERT=/tmp/certs/cacerts.pem --network est grindsa/estclient estclient.cisco -g -s est-proxy.est -p 17443 -k /tmp/certs/key-x-x.pem -c /tmp/certs/cert-0-0.pem -o /tmp/certs --pem-out -v
        sudo openssl x509 -outform der -in /tmp/certs/cert-0-0.pem  -out /tmp/certs/cert-0-1.der

    - name: "[ PREPARE ] reconfigure est_proxy and enable SRP"
      run: |
        sudo cat .github/wf_data/est_proxy_srp.cfg >> examples/Docker/data/est_proxy.cfg
        cd examples/Docker/
        docker-compose restart
        docker-compose logs

    - name: "[ Test ] enroll certificate using estclient and Clientauth"
      run: |
        docker run -v /tmp/certs:/tmp/certs --env EST_OPENSSL_CACERT=/tmp/certs/cacerts.pem --network est grindsa/estclient estclient.cisco -e -s est-proxy.est -p 17443 -k /tmp/certs/estclient.key.pem -c /tmp/certs/estclient.crt.pem --pem-out -o /tmp/certs -v
        sudo openssl x509 -outform der -in /tmp/certs/cert-0-0.pem  -out /tmp/certs/cert-0-2.der
        sudo ls -la /tmp/certs

    - name: "[ Test ] enroll certificate using estclient and srp"
      run: |
        docker run -v /tmp/certs:/tmp/certs --env EST_OPENSSL_CACERT=/tmp/certs/cacerts.pem --network est grindsa/estclient estclient.cisco -e -s est-proxy.est -p 17443 --srp --srp-user user1 --srp-password password1 --pem-out -o /tmp/certs -v
        sudo openssl x509 -outform der -in /tmp/certs/cert-0-0.pem  -out /tmp/certs/cert-0-3.der
        sudo ls -la /tmp/certs

    - name: "[ * ] collecting test logs"
      if: ${{ failure() }}
      run: |
        mkdir -p ${{ github.workspace }}/artifact/upload
        sudo cp -rp examples/Docker/data/ ${{ github.workspace }}/artifact/data/
        sudo cp -rp /tmp/certs ${{ github.workspace }}/artifact/data/tmp_certs
        cd examples/Docker
        docker-compose logs > ${{ github.workspace }}/artifact/docker-compose.log
        sudo tar -C ${{ github.workspace }}/artifact/ -cvzf ${{ github.workspace }}/artifact/upload/artifact.tar.gz docker-compose.log data

    - name: "[ * ] uploading artificates"
      uses: actions/upload-artifact@v2
      if: ${{ failure() }}
      with:
        name: est_proto_curl.tar.gz
        path: ${{ github.workspace }}/artifact/upload/
